主要思路
------
- 基于phalcon,充分利用phalcon的已经实现的各种组件,发挥phalcon框架的性能优势;
- 吸收laravel、rails 5的优点, 尽可能简化开发人员在基础环境配置方面的工作;
- 整合优秀的第三方模块功能,比如Phinx,弥补phalcon的一些缺失功能;
- 瞎倒腾……

主要计划完成的功能
------
- 配置文件的自动处理。仿照laravel的结构,默认相关配置文件的格式、路径,自动完成配置的加载;
- 服务自动注册。优化phalcon的factorydefault, 结合配置文件自动处理功能, 自动配置并注册相关服务;
- 数据迁移工具的集成。使用Phinx,并且整合到控制台工具中;
- 路由的优化。基于phalcon自身的router组件, 实现类似rails的路由定义, 支持RESTful的路由定义;
- 任务调度。通过控制台集中管理任务调度;
- API模式。实现类似rails 5的api模式,即不需要视图,直接输出json;
- 优化调试模式。友好的展示错误信息;
- 学习laravel、rails、phalcon-devtools的一些功能,整合一些脚手架生成的命令行工具到控制台里面;
- 简单的模块化

希望实现的扩展功能
------
- 作为后台的话,提供一个基于RBAC的权限控制组件。可以从Phalcon的ACL组件做起。
- 作为前台的话,提供一个基本的用户注册、登录、管理功能。可以整合OAuth的一些东西进去,包括Client和Server。
- 提供一个微框架基础,通过Phalcon的Micro组件实现。可以参照lumen项目。

作为拿来即能用的开发基础,计划开发以基础CMS为主,在这个框架基础上,可以做其他用途
------
- 后台
  - 用户管理模块
  - 权限管理模块
  - 多租户管理
  - 角色管理
  - 基本内容管理(只是作为一个模块,用来示范)
    - 栏目管理
    - 文章管理
    - 页面管理
- 前台
  - 注册
  - 登陆
  - 显示
  